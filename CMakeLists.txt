# CMake build script for CBC.
# Author: Victor Zverovich

cmake_minimum_required(VERSION 2.6)

project(CBC)

# Parses an automake input processing conditional parts such as:
#   if VAR
#   ...
#   else
#   ...
#   endif
function(parse_am filename index keep)
  set(lines )
  while (1)
    list(LENGTH in_lines length)
    if (NOT (index LESS length))
      break()
    endif ()
    list(GET in_lines ${index} line)
    if (line MATCHES "^[ \t]*endif")
      break ()
    elseif (line MATCHES "^[ \t]*else")
      break ()
    elseif (line MATCHES "^[ \t]*if[ \t]*([^ \t]*)")
      set(keep_then FALSE)
      set(keep_else TRUE)
      if (${CMAKE_MATCH_1})
        set(keep_then TRUE)
        set(keep_else FALSE)
      endif ()
      #message("if (${CMAKE_MATCH_1}): ${keep_then}")
      math(EXPR index "${index} + 1")
      parse_am(${filename} ${index} ${keep_then})
      set(index ${out_index})
      set(lines ${lines} ${out_lines})
      list(GET in_lines ${index} line)
      if (line MATCHES "^[ \t]*else")
        math(EXPR index "${index} + 1")
        parse_am(${filename} ${index} ${keep_else})
        set(index ${out_index})
        set(lines ${lines} ${out_lines})
        list(GET in_lines ${index} line)
      endif ()
      if (NOT (line MATCHES "^[ \t]*endif"))
        message(WARNING "${filename}:${index}: expected 'else' or 'endif'")
      endif ()
    elseif (keep)
      set(lines ${lines} "${line}")
    endif ()
    math(EXPR index "${index} + 1")
  endwhile ()
  set(out_index ${index} PARENT_SCOPE)
  set(out_lines ${lines} PARENT_SCOPE)
endfunction()

# Reads an automake file (Makefile.am).
function(read_am_file filename var)
  message("Parsing ${filename}")
  file(READ ${filename} text)
  string(REPLACE "\\\n" "" text "${text}")
  string(REGEX MATCHALL "[^\n]+" in_lines "${text}")
  parse_am(${filename} 0 TRUE)
  set(${var} ${out_lines} PARENT_SCOPE)
endfunction()

# Adds a COIN-OR library located at the specified path.
# Additional arguments specify library dependencies.
# By default the last path component is used as a library name.
# This can be overriden with NAME <libname> in arguments.
function(add_coin_library path)
  get_filename_component(name ${path} NAME)
  set(src_path ${path})
  if (EXISTS ${path}/src)
    set(src_path ${path}/src)
  endif ()
  # Process optional arguments.
  set(dependencies )
  set(expect_name False)
  foreach (arg ${ARGN})
    if (expect_name)
      set(name ${arg})
      set(expect_name False)
    elseif (arg STREQUAL "NAME")
      set(expect_name True)
    else ()
      set(dependencies ${dependencies} ${arg})
    endif ()
  endforeach ()
  # Extract the source list from Makefile.am.
  set(sources )
  read_am_file(${src_path}/Makefile.am LINES)
  foreach (line ${LINES})
    if (line MATCHES "^lib${name}_la_SOURCES [+]?= (.*)")
      string(REGEX MATCHALL "[^ \t]+" src "${CMAKE_MATCH_1}")
      foreach (s ${src})
        set(sources ${sources} ${src_path}/${s})
      endforeach ()
    endif ()
  endforeach ()
  # Add a library.
  add_library(${name} ${sources})
  include_directories(${src_path})
  string(TOUPPER ${name} uppercase_name)
  add_definitions(-D${uppercase_name}_BUILD)
  set(COIN_HAS_${uppercase_name} 1 PARENT_SCOPE)
  target_link_libraries(${name} ${dependencies})
endfunction()

# Process config.h using autoconf rules.
function(configure file)
  file(STRINGS ${file}.in CONFIG)
  list(LENGTH CONFIG length)
  math(EXPR length "${length} - 1")
  set(CONFIG_OUT )
  foreach (i RANGE ${length})
    list(GET CONFIG ${i} line)
    if (line MATCHES "^#( *)undef (.*)")
      set(space "${CMAKE_MATCH_1}")
      set(var ${CMAKE_MATCH_2})
      if (${var}_C)
        # Variables with suffix "_C" are defined unquoted.
        set(line "#${space}define ${var} ${${var}_C}")
      elseif (NOT DEFINED ${var} OR (var MATCHES "HAVE_.*_H" AND NOT ${var}))
        set(line "/* #${space}undef ${var} */")
      else ()
        if (NOT (var MATCHES ^HAVE OR ${var} EQUAL 1))
          set(value \"${${var}}\")
        elseif (${var})
          set(value 1)
        else ()
          set(value 0)
        endif ()
        set(line "#${space}define ${var} ${value}")
       endif ()
    endif ()
    string(REPLACE "<semi>" ";" line "${line}")
    set(CONFIG_OUT "${CONFIG_OUT}${line}\n")
  endforeach ()
  file(WRITE ${file}
"/* src/config.h.  Generated by configure.  */
${CONFIG_OUT}")
endfunction()

include(CheckIncludeFiles)
foreach (header dlfcn inttypes memory stdlib strings string sys/stat unistd)
  string(TOUPPER ${header} var)
  string(REPLACE "/" "_" var ${var})
  check_include_files(${header}.h HAVE_${var}_H)
endforeach ()
if (HAVE_STDLIB_H)
  set(STDC_HEADERS 1)
endif ()

include(CheckIncludeFileCXX)
check_include_file_cxx(cfloat HAVE_CFLOAT)
check_include_file_cxx(cmath HAVE_CMATH)
if (NOT HAVE_CMATH)
  check_include_files(math.h HAVE_MATH_H)
endif ()

include(CheckSymbolExists)
include(CheckTypeSize)
check_symbol_exists(isfinite math.h COIN_HAS_ISFINITE)
if (COIN_HAS_ISFINITE)
  set(COIN_C_FINITE_C isfinite)
endif ()
check_symbol_exists(int64_t inttypes.h COIN_HAS_INT64_T)
if (COIN_HAS_INT64_T)
  set(COIN_INT64_T_C int64_t)
  set(COIN_UINT64_T_C uint64_t)
else ()
  check_type_size("long long" LONG_LONG_SIZE)
  if (LONG_LONG_SIZE EQUAL 8)
    set(COIN_INT64_T_C "long long")
    set(COIN_UINT64_T_C "unsigned long long")
  endif ()
endif ()

# Get version numbers and parts of config.h from configure.ac.
file(READ configure.ac LINES)
# Replace semicolons with "<semi>" to avoid CMake messing with them.
string(REPLACE ";" "<semi>" LINES "${LINES}")
# Split into lines keeping newlines to avoid foreach skipping empty ones.
string(REGEX MATCHALL "[^\n]*\n" LINES "${LINES}")
set(ah_command FALSE)
foreach (line "${EXTRA_CONFIG}" ${LINES})
  string(REPLACE ";" "" line "${line}")
  if (ah_command)
    # Do nothing.
  elseif (line MATCHES "AC_INIT\\(([^,]*), *([^,]*), *([^)]*)\\)")
    set(PACKAGE_NAME ${CMAKE_MATCH_1})
    set(VERSION ${CMAKE_MATCH_2})
    set(PACKAGE_BUGREPORT ${CMAKE_MATCH_3})
    # Remove surrounding '[' and ']'.
    foreach (var VERSION PACKAGE_NAME PACKAGE_BUGREPORT)
      if (${${var}} MATCHES "^\\[(.*)\\]$")
        set(${var} ${CMAKE_MATCH_1})
      endif ()
    endforeach ()
    message(STATUS "Got VERSION=${VERSION} from configure.ac")
  endif ()
endforeach ()
string(TOLOWER ${PACKAGE_NAME} PACKAGE)
set(PACKAGE_TARNAME ${PACKAGE})
set(PACKAGE_URL "")
set(PACKAGE_VERSION ${VERSION})
string(TOUPPER ${PACKAGE} UPPERCASE_PACKAGE)
set(${UPPERCASE_PACKAGE}_VERSION ${VERSION})
set(PACKAGE_STRING "${PACKAGE_NAME} ${VERSION}")
if (VERSION MATCHES "(.*)\\.(.*)\\.(.*)")
  set(${UPPERCASE_PACKAGE}_VERSION_MAJOR_C ${CMAKE_MATCH_1})
  set(${UPPERCASE_PACKAGE}_VERSION_MINOR_C ${CMAKE_MATCH_2})
  set(${UPPERCASE_PACKAGE}_VERSION_RELEASE_C ${CMAKE_MATCH_3})
endif ()

add_coin_library(CoinUtils)
add_coin_library(Clp CoinUtils)
add_coin_library(Clp/src/OsiClp Osi Clp)
add_coin_library(Osi/src/Osi)

add_coin_library(Cgl)
add_coin_library(Cgl/src/CglClique)
add_coin_library(Cgl/src/CglDuplicateRow)
add_coin_library(Cgl/src/CglFlowCover)
add_coin_library(Cgl/src/CglGomory)
add_coin_library(Cgl/src/CglKnapsackCover)
add_coin_library(Cgl/src/CglLandP)
add_coin_library(Cgl/src/CglMixedIntegerRounding2)
add_coin_library(Cgl/src/CglOddHole)
add_coin_library(Cgl/src/CglPreProcess CglClique CglDuplicateRow)
add_coin_library(Cgl/src/CglProbing)
add_coin_library(Cgl/src/CglRedSplit)
add_coin_library(Cgl/src/CglResidualCapacity)
add_coin_library(Cgl/src/CglTwomir)

add_coin_library(Cbc
  OsiClp CglFlowCover CglGomory CglKnapsackCover
  CglMixedIntegerRounding2 CglPreProcess CglProbing)

add_coin_library(Cbc NAME CbcSolver
  Cbc Cgl CglLandP CglRedSplit CglResidualCapacity CglTwomir)

add_executable(cbc Cbc/src/CoinSolve.cpp)
target_link_libraries(cbc CbcSolver)

add_definitions(-DHAVE_CONFIG_H)
configure(${CBC_SOURCE_DIR}/CoinUtils/src/config.h)
configure(${CBC_SOURCE_DIR}/Osi/src/Osi/config_osi.h)
configure(${CBC_SOURCE_DIR}/Cbc/src/config.h)
